generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId   Int     @id @default(autoincrement())
  user42Id Int?    @unique
  email    String
  password String?

  profile Profile? @relation("profile")
  friends Friend[] @relation("friend")

  sentInvitations     Invitation[] @relation("SentInvitations")
  receivedInvitations Invitation[] @relation("ReceivedInvitations")

  @@map("Users")
}

model Profile {
  userId             Int                 @id
  user               User                @relation("profile", fields: [userId], references: [userId], onDelete: Cascade)
  nickname           String              @unique
  avatarUrl          String?
  Friends            Friend[]            @relation("friendOf")
  chatParticipations ChatParticipation[]
  gameParticipations GameParticipation[]
}

model Friend {
  userId   Int
  friendId Int

  user   User    @relation("friend", fields: [userId], references: [userId], onDelete: Cascade)
  friend Profile @relation("friendOf", fields: [friendId], references: [userId], onDelete: Cascade)

  @@id([userId, friendId])
  @@map("Friends")
}

model Invitation {
  invitationId Int @id @default(autoincrement())

  senderId   Int
  receiverId Int
  sender     User @relation("SentInvitations", fields: [senderId], references: [userId], onDelete: Cascade)
  receiver   User @relation("ReceivedInvitations", fields: [receiverId], references: [userId], onDelete: Cascade)

  status InvitationStatus @default(PENDING)
  kind   InvitationKind

  targetChatId Int?
  targetChat   Chat? @relation(fields: [targetChatId], references: [chatId], onDelete: Cascade)

  targetGameId Int?
  targetGame   Game?

  @@map("Invitations")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REFUSED
  CANCELED
}

enum InvitationKind {
  FRIEND
  CHAT
  GAME
}

model Chat {
  chatId Int @id @default(autoincrement())

  chatName      String  @unique
  chatAvatarUrl String?
  password      String?

  invitations  Invitation[]
  participants ChatParticipation[]
  messages     Message[]

  @@map("Chats")
}

model Message {
  messageId Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  chatId         Int
  chat           Chat   @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
  userId         Int
  messageContent String

  @@map("Messages")
}

model ChatParticipation {
  role         Role      @default(MEMBER)
  mutedUntil   DateTime?
  blockedUntil DateTime?

  chatId Int
  chat   Chat @relation(fields: [chatId], references: [chatId], onDelete: Cascade)

  userId      Int
  userProfile Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("ChatParticipations")
}

enum Role {
  ADMIN
  MEMBER
}

model GameParticipation {
  Point    Int      @default(0)
  isWinner Boolean?

  gameId Int
  game   Game @relation(fields: [gameId], references: [gameId], onDelete: Cascade)

  userId      Int
  userProfile Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([gameId, userId])
  @@map("GameParticipations")
}

model Game {
  gameId Int @id @default(autoincrement())

  scoreToWin Int        @default(3)
  gameStatus GameStatus @default(WAITING_FOR_PLAYER)

  playerOnePaddlePos Int @default(0)
  playerTwoPaddlePos Int @default(0)

  ballPositionX Int @default(0)
  ballPositionY Int @default(0)

  invitationId Int                 @unique
  invitation   Invitation          @relation(fields: [invitationId], references: [invitationId], onDelete: Cascade)
  participants GameParticipation[]

  @@map("Games")
}

enum GameStatus {
  WAITING_FOR_PLAYER
  IN_PROGRESS
  PAUSED
  FINISHED
  CANCELED
}
