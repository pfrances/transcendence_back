generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int     @id @default(autoincrement())
  user42Id  Int?    @unique
  email     String
  password  String?
  hasSet2Fa Boolean @default(false)

  profile Profile? @relation("profile")
  friends Friend[] @relation("friend")

  sentInvitations     Invitation[] @relation("SentInvitations")
  receivedInvitations Invitation[] @relation("ReceivedInvitations")

  sentDirectMessages     DirectMessage[] @relation("SentDirectMessages")
  receivedDirectMessages DirectMessage[] @relation("ReceivedDirectMessages")

  blockedUsers BlockedUser[] @relation("blocked")
  blockedBy    BlockedUser[] @relation("blockedBy")
  banList      ChatBan[]

  @@map("Users")
}

model BlockedUser {
  userId        Int
  blockedUserId Int

  user        User @relation("blocked", fields: [userId], references: [userId], onDelete: Cascade)
  blockedUser User @relation("blockedBy", fields: [blockedUserId], references: [userId], onDelete: Cascade)

  @@id([userId, blockedUserId])
  @@map("BlockedUsers")
}

model Profile {
  userId    Int      @id
  user      User     @relation("profile", fields: [userId], references: [userId], onDelete: Cascade)
  nickname  String   @unique
  avatarUrl String?
  Friends   Friend[] @relation("friendOf")

  gameParticipations GameParticipation[]
  chatParticipations ChatParticipation[]
}

model Friend {
  userId   Int
  friendId Int

  user   User    @relation("friend", fields: [userId], references: [userId], onDelete: Cascade)
  friend Profile @relation("friendOf", fields: [friendId], references: [userId], onDelete: Cascade)

  @@id([userId, friendId])
  @@map("Friends")
}

model Invitation {
  invitationId Int @id @default(autoincrement())

  senderId   Int
  receiverId Int
  sender     User @relation("SentInvitations", fields: [senderId], references: [userId], onDelete: Cascade)
  receiver   User @relation("ReceivedInvitations", fields: [receiverId], references: [userId], onDelete: Cascade)

  status InvitationStatus @default(PENDING)
  kind   InvitationKind

  targetChatId Int?
  targetChat   Chat? @relation(fields: [targetChatId], references: [chatId], onDelete: Cascade)

  @@map("Invitations")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REFUSED
  CANCELED
}

enum InvitationKind {
  FRIEND
  CHAT
}

model Chat {
  chatId Int @id @default(autoincrement())

  chatName      String  @unique
  chatAvatarUrl String?
  password      String?
  isPrivate     Boolean @default(false)

  banList ChatBan[]

  invitations  Invitation[]
  participants ChatParticipation[]
  messages     Message[]

  @@map("Chats")
}

model ChatBan {
  chatId Int
  userId Int

  chat Chat @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([chatId, userId])
  @@map("ChatBans")
}

model Message {
  messageId Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  chatId         Int
  chat           Chat   @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
  userId         Int
  messageContent String

  @@map("Messages")
}

model DirectMessage {
  messageId Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  senderId       Int
  sender         User   @relation("SentDirectMessages", fields: [senderId], references: [userId], onDelete: Cascade)
  receiverId     Int
  receiver       User   @relation("ReceivedDirectMessages", fields: [receiverId], references: [userId], onDelete: Cascade)
  messageContent String

  @@map("DirectMessages")
}

model ChatParticipation {
  role       Role      @default(MEMBER)
  mutedUntil DateTime?

  chatId Int
  chat   Chat @relation(fields: [chatId], references: [chatId], onDelete: Cascade)

  userId      Int
  userProfile Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("ChatParticipations")
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model GameParticipation {
  score    Int      @default(0)
  isWinner Boolean?

  gameId Int
  game   Game @relation(fields: [gameId], references: [gameId], onDelete: Cascade)

  userId      Int
  userProfile Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([gameId, userId])
  @@map("GameParticipations")
}

model Game {
  gameId Int @id @default(autoincrement())

  scoreToWin Int        @default(3)
  gameStatus GameStatus @default(IN_PROGRESS)
  
  participants GameParticipation[]

  @@map("Games")
}

enum GameStatus {
  IN_PROGRESS
  FINISHED
  CANCELED
}
